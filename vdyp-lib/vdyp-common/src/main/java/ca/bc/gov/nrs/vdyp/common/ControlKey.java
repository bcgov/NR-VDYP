package ca.bc.gov.nrs.vdyp.common;

import java.util.Optional;

public enum ControlKey {

	MAX_NUM_POLY(1),

	BEC_DEF(9), SP0_DEF(10),

	// FIP Inputs
	FIP_INPUT_YIELD_POLY(11), FIP_INPUT_YIELD_LAYER(12), FIP_INPUT_YIELD_LX_SP0(13),

	// VRI Inputs
	VRI_INPUT_YIELD_POLY(11), VRI_INPUT_YIELD_LAYER(12), VRI_INPUT_YIELD_HEIGHT_AGE_SI(13),
	VRI_INPUT_YIELD_SPEC_DIST(14),

	// VDYP Forward Inputs
	FORWARD_INPUT_VDYP_POLY(11), FORWARD_INPUT_VDYP_LAYER_BY_SPECIES(12), FORWARD_INPUT_VDYP_LAYER_BY_SP0_BY_UTIL(13),
	FORWARD_INPUT_GROWTO(14),

	// FIP/VRI Outputs
	VRI_OUTPUT_VDYP_POLYGON(15), VRI_OUTPUT_VDYP_LAYER_BY_SPECIES(16), VRI_OUTPUT_VDYP_LAYER_BY_SP0_BY_UTIL(18),

	// VDYP Forward Outputs
	VDYP_OUTPUT_VDYP_POLYGON(15), VDYP_OUTPUT_VDYP_LAYER_BY_SPECIES(16), VDYP_OUTPUT_VDYP_LAYER_BY_SP0_BY_UTIL(18),
	VDYP_OUTPUT_COMPATIBILITY_VARIABLES(19),

	VOLUME_EQN_GROUPS(20), DECAY_GROUPS(21), BREAKAGE_GROUPS(22),

	SITE_CURVE_NUMBERS(25), SITE_CURVE_AGE_MAX(26),

	PARAM_ADJUSTMENTS(28),

	DEFAULT_EQ_NUM(30), EQN_MODIFIERS(31), STOCKING_CLASS_FACTORS(33),

	COE_BA(40), COE_DQ(41), UPPER_BA_BY_CI_S0_P(43),

	HL_PRIMARY_SP_EQN_P1(50), HL_PRIMARY_SP_EQN_P2(51), HL_PRIMARY_SP_EQN_P3(52), HL_NONPRIMARY(53),

	BY_SPECIES_DQ(60), SPECIES_COMPONENT_SIZE_LIMIT(61),

	UTIL_COMP_BA(70), UTIL_COMP_DQ(71),

	SMALL_COMP_PROBABILITY(80), SMALL_COMP_BA(81), SMALL_COMP_DQ(82), SMALL_COMP_HL(85), SMALL_COMP_WS_VOLUME(86),

	TOTAL_STAND_WHOLE_STEM_VOL(90), UTIL_COMP_WS_VOLUME(91), CLOSE_UTIL_VOLUME(92), VOLUME_NET_DECAY(93),
	VOLUME_NET_DECAY_WASTE(94), BREAKAGE(95),

	VETERAN_LAYER_VOLUME_ADJUST(96), VETERAN_LAYER_DQ(97), VETERAN_BQ(98),

	VTROL(101), BA_YIELD(106), DQ_YIELD(107), BA_DQ_UPPER_BOUNDS(108),

	BA_GROWTH_FIAT(111), DQ_GROWTH_FIAT(117),

	BA_GROWTH_EMPIRICAL(121), DQ_GROWTH_EMPIRICAL(122), DQ_GROWTH_EMPIRICAL_LIMITS(123),

	PRIMARY_SP_BA_GROWTH(148), NON_PRIMARY_SP_BA_GROWTH(149),

	PRIMARY_SP_DQ_GROWTH(150), NON_PRIMARY_SP_DQ_GROWTH(151),

	MINIMA(197), MODIFIER_FILE(198), DEBUG_SWITCHES(199),

	BA_MODIFIERS, DQ_MODIFIERS, HL_MODIFIERS, DECAY_MODIFIERS, WASTE_MODIFIERS;

	public final Optional<Integer> sequence;

	ControlKey(int sequence) {
		this.sequence = Optional.of(sequence);
	}

	ControlKey() {
		this.sequence = Optional.empty();
	}

	public static boolean isControlKey(String key) {
		try {
			ControlKey.valueOf(key);
		} catch (IllegalArgumentException e) {
			return false;
		}
		return true;
	}
}
