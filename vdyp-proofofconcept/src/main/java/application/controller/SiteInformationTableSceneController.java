package application.controller;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Spinner;
import javafx.scene.control.SpinnerValueFactory;
import javafx.stage.Stage;

public class SiteInformationTableSceneController implements Initializable {
	// Choice boxes and spinners for scene #2
	@FXML
	private ChoiceBox<String> ecoZone;
	@FXML
	private ChoiceBox<String> becZone;
	@FXML
	private ChoiceBox<String> ageType;
	@FXML
	private Spinner<Double> standAge;
	@FXML
	private Spinner<Double> standHeight;
	@FXML
	private Spinner<Double> bha50SiteIndex;

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		setDefaults();

	}

	/**
	 * Handles the action event when the "Age (years)" option is selected in the
	 * float radiobutton. Disables the standAge choicebox and enables the
	 * bha50SiteIndex and standHeight choiceboxes.
	 *
	 * @param event The ActionEvent generated by the user action.
	 */
	public void standAgeSelected(ActionEvent event) {
		standAge.setDisable(true);
		bha50SiteIndex.setDisable(false);
		standHeight.setDisable(false); // since we don't know from where it's being called
	}

	/**
	 * Handles the action event when the "Height (meters)" option is selected in the
	 * float radiobutton. Disables the standHeight choicebox and enables the
	 * standAge and bha50SiteIndex choiceboxes.
	 *
	 * @param event The ActionEvent generated by the user action.
	 */
	public void standHeightSelected(ActionEvent event) {
		standHeight.setDisable(true);
		standAge.setDisable(false); // since we don't know from where it's being called
		bha50SiteIndex.setDisable(false);
	}

	/**
	 * Handles the action event when the "BHA 50 Site Index" option is selected in
	 * the float radiobutton. Disables the bha50SiteIndex choicebox and enables the
	 * standAge and standHeight choiceboxes .
	 *
	 * @param event The ActionEvent generated by the user action.
	 */
	public void siteIndexSelected(ActionEvent event) {
		bha50SiteIndex.setDisable(true);
		standAge.setDisable(false);
		standHeight.setDisable(false); // since we don't know from where it's being called
	}

	private void setDefaults() {
		// Arrays containing the options for different Bec & Eco Zones
		final String[] becZones = { "AT - Alpine Tundra", "BG - Bunch Grass", "BWBS - Boreal White and Black Spruce",
				"CDF - Coastal Douglas Fir", "CWH - Coastal Western Hemlock", "ESSF - Engelmann Spruce",
				"ICH - Interior Cedar Hemlock", "IDF - Interior Douglas Fir", "MH - Mountain Hemlock",
				"MS - Montane Spruce", "pp = Ponderosa Pine", "SBPS - Sub-Boreal Pine-Spruce",
				"SBS - Sub-Boreal Spruce", "SWB - Spruce-Willow-Birch" };
		final String[] ecoZones = { "Boreal Cordillera", "Boreal Plains", "Montane Cordillera", "Pacific Maritime",
				"Taiga Plains" };

		// An array containing the options for AgeType
		final String[] ageTypes = { "Total", "Breast" };

		// Add choice box options and set defaults
		becZone.getItems().addAll(becZones); // these are defined below in the scene#2 section
		ecoZone.getItems().addAll(ecoZones);
		ageType.getItems().addAll(ageTypes);

		becZone.setValue("IDF - Interior Douglas Fir");
		ecoZone.setValue("Select Species");
		ageType.setValue("Total");

		SpinnerValueFactory<Double> standAgeValueFactory = new SpinnerValueFactory.DoubleSpinnerValueFactory(
				0.00, 500.00, 60.00, 10
		); // min, max, default, increment
		// Currently the default when WinVDYP is opened is 60
		standAge.setValueFactory(standAgeValueFactory);

		SpinnerValueFactory<Double> standHeightValueFactory = new SpinnerValueFactory.DoubleSpinnerValueFactory(
				0.00, 99.9, 17.00, 1
		);
		standHeight.setValueFactory(standHeightValueFactory);

		SpinnerValueFactory<Double> bha50SiteIndexValueFactory = new SpinnerValueFactory.DoubleSpinnerValueFactory(
				0.00, 60.0, 16.30, 1
		);
		bha50SiteIndex.setValueFactory(bha50SiteIndexValueFactory);
		bha50SiteIndex.setDisable(true); // Real WinVDYP uses the other two to calculate this, so it should be disable
											// by default
	}

	// Bottom Menu Bar functionality
	/**
	 * Handles the cancel button action event. This method is triggered when the
	 * cancel button is clicked in the new table window. It closes this new table
	 * window.
	 *
	 * @param event The ActionEvent triggered by the cancel button click.
	 */
	public void cancelButtonAction(ActionEvent event) {
		MainController.getNewWindow().close();
	}

	/**
	 * Handles the default button action event. This method is triggered when the
	 * default button is clicked in the new table window. It sets default values for
	 * species and percentages.
	 *
	 * @param event The ActionEvent triggered by the default button click.
	 */
	public void defaultButtonAction(ActionEvent event) {
		
	}

	/**
	 * Handles the run button action event.
	 *
	 * This method is triggered when the run model button is clicked in the table
	 * window. It checks if the total percentage from all the spinners is equal to
	 * 100%. If the total percentage is not 100%, an error popup is displayed to
	 * notify the user.
	 *
	 * @param event The ActionEvent triggered by the run button click.
	 */
	public void runButtonAction(ActionEvent event) {
		// Code to run the model goes here
	}
//Bottom Menu bar

	/**
	 * Switches the application to Scene 1 - NewTableScene.
	 *
	 * @param event The ActionEvent triggering the scene switch.
	 * @throws IOException If an I/O error occurs during scene loading.
	 */
	public void switchToScene1(ActionEvent event) throws IOException {
		FXMLLoader loader = new FXMLLoader(getClass().getResource("../view/NewTableScene.fxml"));
		NewTableSceneController.root = loader.load();
		NewTableSceneController.stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		NewTableSceneController.scene = new Scene(NewTableSceneController.root);
		NewTableSceneController.stage.setScene(NewTableSceneController.scene);
		NewTableSceneController.stage.show();
	}

	/**
	 * Switches the application to Scene 3 - StandDensityTableScene.
	 *
	 * @param event The ActionEvent triggering the scene switch.
	 * @throws IOException If an I/O error occurs during scene loading.
	 */
	public void switchToScene3(ActionEvent event) throws IOException {
		FXMLLoader loader = new FXMLLoader(getClass().getResource("../view/StandDensityTableScene.fxml"));
		NewTableSceneController.root = loader.load();

		StandDensityTableSceneController controller = new StandDensityTableSceneController();
		loader.setController(controller);

		NewTableSceneController.stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		NewTableSceneController.scene = new Scene(NewTableSceneController.root);
		NewTableSceneController.stage.setScene(NewTableSceneController.scene);
		NewTableSceneController.stage.show();
	}
	// TODO Implement passing information from screen 1

}
